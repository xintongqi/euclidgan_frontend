// Write your game logic here in JavaScript
'use strict';


//payload format: [stack visited?][queue visited?][section number]
const start = (say, sendButton) => {
    
    say('Before we start, do you want to revisit the rules for geometric construction games?' ).then(
        () => {sendButton('My options', [{title: 'Yes, absolutely!', payload: 'TFA0'},{title:'I know the rules 🙂',payload:'FTB0'}]);
    });
    
};



const state = (payload, say, sendButton) => {
    
    // Rule Introduction
    	if (payload.substring(2) === 'A0') {
	    say(['Geometric construction games are games where you\'ll be asked to construct two-dimensional geometric shapes with a given range of tools',
	    'There are several tools that you can use: straight edges that help you draw a line, compasses that help you draw a circle, etc.',
        'Each of them cost differently, and your goal is to find the solution that cost the least.']).then(
	        () => { sendButton('Now are you ready to start the game?', [{title: 'Yes!', payload: payload.substring(0,2)+'A1'}]);
	       });
    }
	
    // Euclidea Alpha 1-2
    	if (payload.substring(2) === 'A1') {
   	 say(['Ok!', 'Now we\'ll begin the first warm-up problem.',
        'In this question, you need to construct the perpendicular bysector of a line segment using straightedges and compasses',
        'That is, construct the green line from the given red line segment',{
		attachment: 'image',
		url: 'https://i.postimg.cc/LXsSfFfz/1-2.png'
	 }]).then(() => { sendButton('Are you able to crack it?', [{title: 'Yes!', payload: payload.substring(0,2)+'A5'},{title: 'Noooo...How to do it?', payload: payload.substring(0,2)+'A2'}]);  
		});
    }

	// Euclidea Alpha 1-2 steps demostration
     	if (payload.substring(2) === 'A2') {
    say(['No worries. You\'ll learn from this exercise 😜', 
        'An important feature of a perpendicular bisector is that the distance between any point on this line and the two endpoints of the line segment will be that same.', 
        'How do we make sure this is true? Well, we can use the compasses to ensure this since all points on the circle have the same distance to the center.',
        'Therefore, we can draw two circles with the same size first, and connect their intersections.',
        'The steps are demonstrated in the short video below 👇',{
		attachment: 'video',
		url: 'https://i.postimg.cc/3r62NgDw/1-2.gif'
	 }]).then(() => { sendButton('Now would like to move on?', [{title: 'Yes!', payload: payload.substring(0,2)+'A5'},{title: 'Hmm maybe a similar problem?', payload: payload.substring(0,2)+'A3'}]);   
   	 });
	}

	// GAN generated question
     	if (payload.substring(2) === 'A3') {
   	 say(['Sure! Practice makes perfect 🙌', 'I\'m glad that you\'ve found this hidden question, which is generated by a computer instead of a human being 🤩',
        'In this problem, ....',{
		attachment: 'image',
		url: 'https://i.postimg.cc/X7jwsr4V/'
	 }]).then(() => { sendButton('Do you want to see the steps?', [{title: 'Yes please.', payload: payload.substring(0,2)+'A4'}, {title: 'Got it this time!', payload: payload.substring(0,2)+'A5'}]);   
	 });  
    }

    // GAN generated steps demostration
    if (payload.substring(2) === 'A4') {
        say(['No worries. You\'ll learn from this exercise 😜', 
            'An important feature of a perpendicular bisector is that the distance between any point on this line and the two endpoints of the line segment will be that same.', 
            'How do we make sure this is true? Well, we can use the compasses to ensure this since all points on the circle have the same distance to the center.',
            'Therefore, we can draw two circles with the same size first, and connect their intersections.',
            'The steps are demonstrated in the short video below 👇',{
            attachment: 'image',
            url: 'https://i.postimg.cc/3r62NgDw/'
         }]).then(() => { sendButton('Now would like to move on?', [{title: 'Yes!', payload: payload.substring(0,2)+'A5'}]);   
            });
        }

    // Eulicdea Alpha 1-3
	if (payload.substring(2) === 'A5') {	
		say('Great! Now that you\'ve moved on to the next level! The upcoming problem will be a little bit more challenging 😈',
        'In this problem, you need to construct the insribed circle from a square, given straightedges and compasses').then(()  => {
		sendButton('Ready for the quiz?', [{title: 'Ready!', payload: payload.substring(0,2)+'A5'}, {title: 'Review', payload: payload.substring(0,2)+'A0'}]); // returns to the beginning of stack, A0
	});  
	}

	// quiz section
	if (payload.substring(2) === '') {
		say(['Quiz time!', 'What will the stack look like after performing these operations?', 
		     'Push 🤠\n Push ✨\n Pop\n Push ✌️\n Push 😁']).then(() => { 
		// answer choices 
		sendButton('All the choices below are from arranged from top to bottom:', [{title: '🤠✨✌️😁', payload: payload.substring(0,4)+'a'}, {title: '🤠✌️😁', payload: payload.substring(0,4)+'b'}, {title: '😁✌️✨🤠', payload: payload.substring(0,4)+'c'}, {title: '😁✌️🤠', payload: payload.substring(0,4)+'d'}]);
	});
		}
	// incorrect
	if (payload.substring(2) === 'A5a') {
		say('Incorrect. Stacks are first in last out, meaning 🤠 goes to the "bottom" of the stack, and anything pushed after goes on top. And the popping would remove the ✨!').then(() => {
		sendButton('Next Question?', [{title: 'Ready!', payload: payload.substring(0,2) + 'A6'}]);
	});
	}
	// incorrect
	if (payload.substring(2) === 'A5b') {
		say('Incorrect. Stacks are first in last out, meaning 🤠 goes to the "bottom" of the stack, and anything pushed after goes on top.').then(() => {
		sendButton('Next Question?', [{title: 'Ready!', payload: payload.substring(0,2) + 'A6'}]);
	});
	}
	// correct
	if (payload.substring(2) === 'A5d') {
		say('Correct!').then(() => {
		sendButton('Next Question?', [{title: 'Ready!', payload: payload.substring(0,2) + 'A6'}]);
	});
	}
	// incorrect
	if (payload.substring(2) === 'A5c') {
		say('Incorrect. Close, but you seem to have forgotten to pop ✨!').then(() => {
		sendButton('Next Question?', [{title: 'Ready!', payload: payload.substring(0,2) + 'A6'}]);
	});
	}
	// next quiz question
	if (payload.substring(2) === 'A6') {
		say('The stack now looks like (top)😁✌️🤠(bottom). What does popping the stack return?').then(()  => {
		sendButton('Question', [{title: '😁', payload: payload.substring(0,4) + 'a'}, {title: '✌️', payload: payload.substring(0,4) + 'b'}, {title: '🤠', payload: payload.substring(0,4) + 'c'}]);
	});
	}
	//correct
	if (payload.substring(2) === 'A6a') {
		say('Correct!').then(()  => {
		sendButton('Done with stacks! ', [{title: 'yes ', payload: payload.substring(0,2)+'Af'}]);
	});
	}
	// incorrect
	if (payload.substring(2) === 'A6b') {
		say('Incorrect. Stacks are first in last out, meaning the last in, or the top of the stack, is the first out. Popping would return and remove 😁 from the stack.').then(()  => {
		sendButton('Done with stacks! ', [{title: 'yes ', payload: payload.substring(0,2)+'Af'}]);
	});
	}
	// incorrect
	if (payload.substring(2) === 'A6c') {
		say('Incorrect. Stacks are first in last out, meaning the last in, or the top of the stack, is the first out. Popping would return and remove 😁 from the stack.').then(() => {
		sendButton('Done with stacks! ', [{title: 'yes ', payload: payload.substring(0,2)+'Af'}]);
	});
	}
	

    //QUEUES (start with 'B')
	if (payload.substring(2)==='B0'){
		say ('A queue is a collection of entities that forms a “queue”. It follows the “First in first out” principle, meaning items can only be added at the end of the queue and removed at the beginning.');
		say('Now think of a queue like the shirts that line up in your closet. You are only allowed to put a new shirt at the end of the queue and take out the first piece of cloth. Meanwhile, you can also peek at the start of the queue, which means you can take a look at the first shirt in your closet.'
		).then(
		() => {sendButton('Got it?', [{title: 'yes!', payload: payload.substring(0,2)+'B1'}]);
	    });
	}

	// enqueue method
    	if (payload.substring(2) === 'B1') {
		say(['Ok!', 'Now, we will learn about the enqueue method. The enqueue operation allows you to input an item at the end of the queue. It is like hanging up one shirt at the end of the queue of clothes.']);
		 say({
			attachment: 'image',
			url: 'https://i.postimg.cc/nrTSfVVx/enqueue.jpg'
		 }).then(() => { sendButton('Got it?', [{title: 'Yes!', payload: payload.substring(0,2)+'B2'}]);});
	 }

    	// dequeue method
	if (payload.substring(2) === 'B2') {
		say(['Ok!', 'The dequeue operation allows you to remove an item at the start of the queue. You can think of it as taking the first shirt out of your closet. However, be careful when you dequeue because the queue might be empty and there’s nothing you can take from it!', 
		'BONUS concept: most implementation of dequeue actually returns the item which you removed. Think of this as you’re holding onto the shirt that you just took off the queue for other purposes (perhaps you want to “enqueue” it onto another queue!)', 
		'Using the same queue as before, we perform the following operations.',{
		attachment: 'image',
		url: 'https://i.postimg.cc/WbC6FqHK/dequeue.jpg'
		}]).then(() => { sendButton('Got it?', [{title: 'Yes!', payload: payload.substring(0,2)+'B3'}]);   
	});
    	}
    
    	// peek method
    	if (payload.substring(2) === 'B3') {
		say(['Ok!', 'The peek operation allows you to get the value of the next element to be dequeued, without dequeuing it. Think of it as taking a look at the first shirt in your closet without taking it out.',{
		attachment: 'image',
		url: 'https://i.postimg.cc/mD1TrqzK/peek.jpg'
		}]).then(() => { sendButton('Got it?', [{title: 'Yes!', payload: payload.substring(0,2)+'B4'}]);   
	});  
    	}
    
    	// ready for quiz?    
	if (payload.substring(2) === 'B4') {	
		say('If you combine the example operations from peek, enqueue, and dequeue, you would have an example of multiple operations done on a single queue.').then(() => {
		sendButton('Ready for the quiz?', [{title: 'Ready!', payload: payload.substring(0,2)+'B5'}, {title: 'Review', payload: payload.substring(0,2)+'B0'}]); // returns to the beginning of queue, B0
	});  
    	}
    
    	// quiz section
	if (payload.substring(2) === 'B5') {
		say(['Quiz time!', 'What will the queue look like after performing these operations?', 
		     'Enqueue 👍\n Enqueue ✨\n Dequeue\n Enqueue 😁\n Dequeue\n Enqueue 🎉\n']).then(() => { 
		sendButton('All the choices below are from arranged from front to back:', [{title: '😁🎉', payload: payload.substring(0,4)+'a'}, {title: '👍🎉', payload: payload.substring(0,4)+'b'}]);
	});
    	}
    
    	// correct
	if (payload.substring(2) === 'B5a') {
		say('Correct!').then(() => {
		sendButton('Next Question?', [{title: 'Ready!', payload: payload.substring(0,2) + 'B6'}]);
	});
	}

	// incorrect
	if (payload.substring(2) === 'B5b') {
		say('Incorrect. Queuess are first in first out, meaning 👍 goes to the front of the queue, and anything enqueued after go to the back. And the first dequeue would remove 👍!').then(() => {
		sendButton('Next Question?', [{title: 'Ready!', payload: payload.substring(0,2) + 'B6'}]);
	});
	}
    
	// next quiz question
	if (payload.substring(2) === 'B6') {
		say('The queue now is (front)😁👍🎉(back). What does the queue look like after two dequeues?').then(() => {
		sendButton('Question', [{title: '🎉', payload: payload.substring(0,4) + 'a'}, {title: 'There is nothing left.', payload: payload.substring(0,4) + 'b'}, {title: '😁', payload: payload.substring(0,4) + 'c'}]);
	});
	}
	// correct
	if (payload.substring(2) === 'B6a') {
		say('Correct!').then(() => {
		sendButton('Done with queues! ', [{title: 'yes ', payload: payload.substring(0,2)+'Bf'}]);
	});
	}

	// incorrect
	if (payload.substring(2) === 'B6b') {
		say('Incorrect. We only dequeued twice while there are three emojis in the queue. meaning there has to be one emoji left in the queue. ').then(() => {
		sendButton('Done with queues! ', [{title: 'yes ', payload: payload.substring(0,2)+'Bf'}]);
	});
	}
    
    	// incorrect
	if (payload.substring(2) === 'B6c') {
		say('Incorrect. Queues are first in first out, meaning it dequeues from the beginning. So 😁 and 👍 are dequeued.').then(() => {
		sendButton('Done with queues! ', [{title: 'yes ', payload: payload.substring(0,2)+'Bf'}]);
	});
	}

    
    
    //END STATEMENTS
	
	// FINAL QUIZ
    if (payload==='TTAf' || payload==='TTBf'){
        say('READY FOR FINAL QUIZ??').then(
        () => {sendButton('🤩', [{title: 'yes!', payload: 'F1'}]);
    });
    }
	
	if (payload==='F1'){
		
			say('What principle does STACK follow?').then(
		() => {sendButton('Question', [{title: 'First In First Out', payload: 'F2'}, {title: 'Last In First Out', payload: 'F3'}]);
				});
	}
	
	if (payload === 'F2') {
		say('Incorrect. The correct answer is Last In First Out.').then(
		() => {sendButton('Next Question?', [{title: 'Ready!', payload: 'F4'}]);
				});
	}
	
	if (payload ==='F3'){
		say ('Correct!').then(
		() => {sendButton('Next Question?', [{title: 'Ready!', payload: 'F4'}]);
				});
	}
	
	if (payload==='F4'){
		
			say('What principle does Queue follow?').then(
		() => {sendButton('Question', [{title: 'First In First Out', payload: 'F5'}, {title: 'Last In First Out', payload: 'F6'}]);
				});
	}
	
	if (payload === 'F6') {
		say('Incorrect. The correct answer is First In First Out.');
		sendButton('Next Question?', [{title: 'Ready!', payload: 'F7'}]);
	}
	
	if (payload ==='F5'){
		say ('Correct!').then(
		()=>{sendButton('Next Question?', [{title: 'Ready!', payload: 'F7'}]);
				});
	}
	
	if (payload==='F7'){
		
			say('What data structure is used to solve recursive problems?').then(
		()=> {sendButton('Question', [{title: 'Stack', payload: 'F8'}, {title: 'Queue', payload: 'F9'}]);
				});
	}
	
	if (payload === 'F9') {
		say('Incorrect. The correct answer is Stack. Because in recursive problems, you want to tackle the most fundamental problem and work your way BACKWARD, remember stack is Last In First Out! On the other hand, queues are used to solve sequential problems. \n CONGRATS, YOU HAVE MASTERED STACKS AND QUEUES!!🎉').then(
		() => {sendButton('restart?', [{title: 'learn it again!', payload: 'restart'},'No']);
				});
	}
	
	if (payload ==='F8'){
		say ('Correct! \n CONGRATS, YOU HAVE MASTERED STACKS AND QUEUES!!🎉').then(
		()=>{sendButton('restart?', [{title: 'learn it again!', payload: 'restart'},'No']);
				});
	}

    
	// GO TO THE LESSON NOT YET LEARNED
    if (payload === 'TFAf'){
        say('').then(
        () => {sendButton('Learn queues now? ', [{title: 'yes', payload: 'TTB0'},'No']);
        });
    }
    if (payload === 'FTBf'){
        say('').then(
        () => {sendButton('Learn stacks now? ', [{title: 'yes', payload: 'TTA0'},'No']);
        });
    }
};





module.exports = {
	filename: 'helloworld',
	title: 'Geomtric Constuctions',
	introduction: [
		'Hello. This is a place where you can practice geometric construction games and enhance your spacial ability. Are you ready for some tasks? Don\'t worry, we\'ll start from the easy ones and you\'ll be able to move at your own pace 😁'
    ],
	start: start,
	state: state
};